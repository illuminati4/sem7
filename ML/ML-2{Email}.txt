import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC, LinearSVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn import preprocessing


df = pd.read_csv('emails.csv')

df.info()

df.head()

df.dtypes


df.drop(columns=['Email No.'], inplace=True)


df.isna().sum()


df.describe()


df.info()


X = df.drop('Prediction', axis = 1)
y = df['Prediction']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=8)



models = {
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=2),
    "Linear SVM":LinearSVC(random_state=8, max_iter=900000),
    "Polynomical SVM":SVC(kernel="poly", degree=2, random_state=8),
    "RBF SVM":SVC(kernel="rbf", random_state=8),
    "Sigmoid SVM":SVC(kernel="sigmoid", random_state=8)
}




from sklearn.metrics import precision_score, recall_score, accuracy_score

for model_name, model in models.items():
    y_pred = model.fit(X_train, y_train).predict(X_test)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    accuracy = accuracy_score(y_test, y_pred)
    
    print(f"Precision for {model_name} model: {precision:.2f}")
    print(f"Recall for {model_name} model: {recall:.2f}")
    print(f"Accuracy for {model_name} model: {accuracy:.2f}")



from sklearn.metrics import ConfusionMatrixDisplay,confusion_matrix,accuracy_score,precision_score,recall_score
def report(classifier):
    y_pred = classifier.predict(X_test)
    cm = confusion_matrix(y_test,y_pred)
    display = ConfusionMatrixDisplay(cm,display_labels=classifier.classes_)
    display.plot()
    print(f"Accuracy:  {accuracy_score(y_test,y_pred)}")
    print(f"Precision Score:  {precision_score(y_test,y_pred)}")
    print(f"Recall Score:  {recall_score(y_test,y_pred)}")



from sklearn.neighbors import KNeighborsClassifier
kNN = KNeighborsClassifier(n_neighbors=10)
kNN.fit(X_train,y_train)



report(kNN)




from sklearn.svm import SVC
svm = SVC(gamma='auto',random_state=10)
svm.fit(X_train,y_train)


report(svm)